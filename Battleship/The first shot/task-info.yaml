type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("A1");
            checkShot(getFieldMatrix(output), "A1", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output) || !output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("E4");
            checkMissing(getFieldMatrix(output), "E4", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                    "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public enum Ship {
        AIRCRAFT_CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        private final String name;
        private final int size;
        Ship(String name, int size) {
            this.name = name;
            this.size = size;
        }

        public String getName() {
            return name;
        }

        public int getSize() {
            return size;
        }
    }
  learner_created: true
- name: src/battleship/validator/Validatable.java
  visible: true
  learner_created: true
- name: src/battleship/validator/IsLengthCorrect.java
  visible: true
  learner_created: true
- name: src/battleship/validator/IsPathFree.java
  visible: true
  learner_created: true
- name: src/battleship/coordinate/Coordinate.java
  visible: true
  text: |
    package battleship;

    import java.util.*;

    public class Coordinate {
        private final int row;
        private final int column;

        public Coordinate(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null || obj.getClass() != this.getClass())
                return false;
            Coordinate coordinate = ((Coordinate) obj);
            return (coordinate.getColumn() == this.getColumn() && coordinate.getRow() == this.getRow());
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.getRow(), this.getColumn());
        }



        public static int calculateSize(Coordinate first, Coordinate second) {
            return (int) Math.sqrt(Math.pow(second.column - first.column, 2) + Math.pow(second.row - first.row,2));
        }

        public static Set<Coordinate> getPathRange(Coordinate first, Coordinate second) {
            Set<Coordinate> range = new HashSet<>();
            try {
                if (calculateSize(first, second) != 1) {
                    Coordinate midPoint = getMidPoint(first, second);
                    range.add(midPoint);
                    range.addAll(getPathRange(first, midPoint));
                    range.addAll(getPathRange(midPoint, second));
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            range.add(first);
            range.add(second);
            return range;
        }

        public static Set<Coordinate> getSurroundingRange(Coordinate coordinate) {
            Set<Coordinate> range = new HashSet<>();
            for (int row = coordinate.getRow() - 1; row <= coordinate.getRow() + 1; row++) {
                for (int column = coordinate.getColumn() - 1; column <= coordinate.getColumn() + 1; column++) {
                    range.add(new Coordinate(row, column));
                }
            }
            return range;
        }

        public static Coordinate getMidPoint(Coordinate first, Coordinate second) throws InvalidCoordinateException {
            if (!isDiagonal(first, second) && !isVertical(first, second) && !isHorizontal(first, second))
                throw new InvalidCoordinateException("Coordinates must form a diagonal, horizontal, or vertical line");

            int row = (first.getRow() + second.getRow()) / 2;
            int column = (first.getColumn() + second.getColumn()) / 2;

            return new Coordinate(row, column);
        }

        private static boolean isHorizontal(Coordinate first, Coordinate second) {
            return first.getRow() == second.getRow();
        }

        private static boolean isVertical(Coordinate first, Coordinate second) {
            return first.getColumn() == second.getColumn();
        }

        private static boolean isDiagonal(Coordinate first, Coordinate second) {
            return Math.abs(first.getRow() - second.getRow()) == Math.abs(first.getColumn() - second.getColumn());
        }


        public static class InvalidCoordinateException extends Exception {
            public InvalidCoordinateException(String errorMessage) {
                super(errorMessage);
            }
        }
    }
  learner_created: true
- name: src/battleship/coordinate/CoordinateInputResult.java
  visible: true
  text: |
    package battleship;

    public enum CoordinateInputResult {
        INCORRECT_LENGTH("Error! Wrong length of the Submarine! Try again"),
        DIAGONAL_DIRECTION("Error! Wrong ship location! Try again"),
        CONFLICTING_LOCATION("Error! You placed it too close to another one. Try again"),
        SUCCESS("Success");

        private final String description;
        private CoordinateInputResult(String description) {
            this.description = description;
        }

        public String getDescription() {
            return this.description;
        }
    }
  learner_created: true
- name: src/battleship/BattleshipBoard.java
  visible: true
  text: |+
    package battleship;

    import java.util.*;

    public class BattleshipBoard {


        private final char[][] board;
        private final Scanner scanner = new Scanner(System.in);

        public BattleshipBoard() {
            this.board = new char[10][10];
            for (char[] row: this.board) {
                Arrays.fill(row, '~');
            }
        }

        public void askShipCoordinate(Ship ship) {
            CoordinateInputResult result = CoordinateInputResult.INCORRECT_LENGTH;
            String prompt = String.format("Enter the coordinates of the %s (%d cells)", ship.getName(), ship.getSize());
            Coordinate first = new Coordinate(1,1);
            Coordinate second = new Coordinate(1,1);
            while (result != CoordinateInputResult.SUCCESS) {
                String[] coordinates = promptShipCoordinates(prompt);
                first = parseLetterNumberCoordinate(coordinates[0]);
                second = parseLetterNumberCoordinate(coordinates[1]);
                result = validate(ship, first, second);
                prompt = result.getDescription();
            }
            Set<Coordinate> range = Coordinate.getPathRange(first, second);
            setCoordinates(range, 'O');
        }

        public void setCoordinates(Set<Coordinate> range, char fill) {
            for (Coordinate coordinate : range) {
                this.board[coordinate.getRow() -1][coordinate.getColumn() - 1] = fill;
            }
        }

        private String[] promptShipCoordinates(String message) {
            String messageLine = message.isBlank() ? "" : message + ":";
            System.out.println("\n" + messageLine + "\n");
            System.out.print("> ");
            String input = scanner.nextLine().toUpperCase();
            return input.split(" ");
        }

        public static Coordinate parseLetterNumberCoordinate(String coordinate) {
            String[] split = coordinate.split("(?<=\\D)(?=\\d)");
            int row = split[0].charAt(0) - (int) 'A' + 1;
            int column = Integer.parseInt(split[1]);
            return new Coordinate(row, column);
        }

        public CoordinateInputResult validate(Ship ship, Coordinate first, Coordinate second) {
            if (!isLengthCorrect(ship, first, second))
                return CoordinateInputResult.INCORRECT_LENGTH;
            if (!isShipDiagonal(first, second))
                return CoordinateInputResult.DIAGONAL_DIRECTION;
            if (!isPathFree(first, second) || !isSpaceSurroundingPathFree(first, second))
                return CoordinateInputResult.CONFLICTING_LOCATION;

            return CoordinateInputResult.SUCCESS;
        }

        private boolean isShipDiagonal(Coordinate first, Coordinate second) {
            if (first.getRow() != second.getRow())
                return first.getColumn() == second.getColumn();
            if (first.getColumn() != second.getColumn())
                return first.getRow() == second.getRow();
            return first.getRow() == second.getRow() || first.getColumn() == second.getColumn();
        }
        private boolean isLengthCorrect(Ship ship, Coordinate first, Coordinate second) {
            int length = Coordinate.calculateSize(first, second) + 1;
            return ship.getSize() == length;
        }
        private boolean isSpaceSurroundingPathFree(Coordinate first, Coordinate second) {
            Set<Coordinate> range = Coordinate.getPathRange(first, second);
            return range.stream().allMatch(this::isSurroundingSpaceFree);
        }
        private boolean isSurroundingSpaceFree(Coordinate coordinate) {
            Set<Coordinate> surroundingRange = Coordinate.getSurroundingRange(coordinate);
            surroundingRange.removeIf(c -> c.getRow() < 1 || c.getColumn() < 1
                    || c.getRow() > this.board.length - 1 || c.getColumn() > this.board.length - 1);
            return surroundingRange.stream().allMatch(this::isSpaceFree);
        }
        private boolean isPathFree(Coordinate first, Coordinate second) {
            Set<Coordinate> range = Coordinate.getPathRange(first, second);
            return range.stream().allMatch(this::isSpaceFree);
        }
        private boolean isSpaceFree(Coordinate coordinate) {
            return this.board[coordinate.getRow() - 1][coordinate.getColumn() - 1] == '~';
        }

        public void displayBoard() {
            displayColumnHeaders();
            displayBoardWithRowLetter();
        }
        private void displayColumnHeaders() {
            System.out.print("  ");
            for (int i = 1; i < 11; i++) {
                System.out.print(i + " ");
            }
            System.out.println();
        }
        private void displayBoardWithRowLetter() {
            char letter = 'A';
            for (char[] row: this.board) {
                System.out.print(letter + " ");

                for (char space : row)
                    System.out.print(space + " ");

                letter ++;
                System.out.println();
            }
        }
    }

  learner_created: true
- name: src/battleship/coordinate/CoordinatePair.java
  visible: true
  learner_created: true
- name: src/battleship/input/ScannerInput.java
  visible: true
  learner_created: true
- name: src/battleship/validator/ValidatorFactory.java
  visible: true
  learner_created: true
- name: src/battleship/validator/IsValidShipDirection.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10595#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 21 Dec 2022 15:43:33 UTC
record: 2
