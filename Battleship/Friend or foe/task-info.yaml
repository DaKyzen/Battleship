type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/coordinate/Coordinate.java
  visible: true
  text: |
    package battleship.coordinate;

    import java.util.*;

    public class Coordinate {
        private final int row;
        private final int column;

        public Coordinate(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null || obj.getClass() != this.getClass())
                return false;
            Coordinate coordinate = ((Coordinate) obj);
            return (coordinate.getColumn() == this.getColumn() && coordinate.getRow() == this.getRow());
        }

        @Override
        public int hashCode() {
            return Objects.hash(this.getRow(), this.getColumn());
        }

        public Set<Coordinate> getSurroundingRange() {
            Set<Coordinate> range = new HashSet<>();
            for (int row = this.row - 1; row <= this.row + 1; row++) {
                for (int column = this.column - 1; column <= this.column + 1; column++) {
                    range.add(new Coordinate(row, column));
                }
            }
            return range;
        }





    }
  learner_created: true
- name: src/battleship/input/ScannerInput.java
  visible: true
  text: |
    package battleship.input;

    import battleship.Main;
    import battleship.Ship;
    import battleship.coordinate.Coordinate;
    import battleship.coordinate.CoordinatePair;

    import java.util.Scanner;

    public class ScannerInput {
        private final Scanner scanner = new Scanner(System.in);

        public CoordinatePair askShipCoordinate(Ship ship, String prompt) {
            String[] coordinates = promptShipCoordinates(ship, prompt);

            return new CoordinatePair(
                parseLetterNumberCoordinate(coordinates[0]),
                parseLetterNumberCoordinate(coordinates[1])
            );
        }
        public CoordinatePair askShipCoordinate(Ship ship) {
            return askShipCoordinate(ship, "");
        }

        public Coordinate askCoordinate() {
            String input = promptInput("");
            return parseLetterNumberCoordinate(input);
        }
        public Coordinate askCoordinate(String prompt) {
            String input = promptInput(prompt);
            return parseLetterNumberCoordinate(input);
        }

        private String[] promptShipCoordinates(Ship ship, String prompt) {
            String defaultPrompt = String.format("Enter the coordinates of the %s (%d cells)", ship.getName(), ship.getSize());
            String messageLine = prompt.isBlank() ? defaultPrompt : prompt;
            String input = promptInput(messageLine);
            return input.split(" ");
        }

        private String promptInput(String prompt) {
            if (!prompt.isBlank())
                Main.display(prompt + ":");
            String input = scanner.nextLine().toUpperCase();
            System.out.println();
            return input;
        }

        private Coordinate parseLetterNumberCoordinate(String coordinate) {
            String[] split = coordinate.split("(?<=\\D)(?=\\d)");
            int row = split[0].charAt(0) - (int) 'A' + 1;
            int column = Integer.parseInt(split[1]);
            return new Coordinate(row, column);
        }
    }
  learner_created: true
- name: src/battleship/validator/Validatable.java
  visible: true
  text: |
    package battleship.validator;

    import battleship.coordinate.CoordinateInputResult;

    public interface Validatable {
        boolean isValid();
        CoordinateInputResult getErrorMessage();
    }
  learner_created: true
- name: src/battleship/validator/IsLengthCorrect.java
  visible: true
  text: |
    package battleship.validator;

    import battleship.coordinate.CoordinateInputResult;
    import battleship.coordinate.CoordinatePair;
    import battleship.Ship;

    public class IsLengthCorrect implements Validatable{
        private final CoordinatePair pair;
        private final Ship ship;

        public IsLengthCorrect(CoordinatePair pair, Ship ship) {
            this.ship = ship;
            this.pair =pair;

        }

        @Override
        public boolean isValid() {
            int length = pair.calculateSize() + 1;
            return this.ship.getSize() == length;
        }

        @Override
        public CoordinateInputResult getErrorMessage() {
            return isValid() ? CoordinateInputResult.SUCCESS : CoordinateInputResult.INCORRECT_LENGTH;
        }
    }
  learner_created: true
- name: src/battleship/BattleshipBoard.java
  visible: true
  text: |+
    package battleship;

    import battleship.coordinate.BoardMark;
    import battleship.coordinate.Coordinate;

    import java.util.*;

    public class BattleshipBoard {
        private final char[][] openBoard;
        private final Map<Ship, Set<Coordinate>> shipCoordinates;
        private int numOccupied = 0;

        public BattleshipBoard() {
            this.openBoard = new char[10][10];
            this.shipCoordinates = new HashMap<>();
            for (char[] chars : this.openBoard) {
                Arrays.fill(chars, BoardMark.FOG.getMark());
            }
        }

        public void addShip(Ship ship, Set<Coordinate> range) {
            this.setCoordinates(range, BoardMark.OCCUPIED);
            this.numOccupied += range.size();
            this.shipCoordinates.put(ship, range);
        }
        public Optional<Ship> shootCoordinate(Coordinate coordinate) throws ArrayIndexOutOfBoundsException {
            if (checkCoordinateHasMark(coordinate, BoardMark.OCCUPIED))
                numOccupied--;
            if (!isSpaceFree(coordinate))
                setCoordinate(coordinate, BoardMark.HIT);
            else
                setCoordinate(coordinate, BoardMark.MISSED);

            return getShipFromCoordinate(coordinate);
        }
        private void setCoordinates(Set<Coordinate> range, BoardMark mark) throws ArrayIndexOutOfBoundsException {
            for (Coordinate coordinate : range) {
                setCoordinate(coordinate, mark);
            }
        }
        private void setCoordinate(Coordinate coordinate, BoardMark mark) throws ArrayIndexOutOfBoundsException {
            this.openBoard[coordinate.getRow() -1][coordinate.getColumn() - 1] = mark.getMark();
        }
        public Optional<Ship> getShipFromCoordinate(Coordinate coordinate) {
            Set<Ship> ships = shipCoordinates.keySet();
            Optional<Ship> foundShip = Optional.empty();
            for (Ship ship : ships) {
                if (shipCoordinates.get(ship).contains(coordinate))
                    foundShip = Optional.of(ship);
            }
            return foundShip;
        }

        public boolean isAllOccupiedHit() {
            return this.numOccupied == 0;
        }

        public boolean isShipSunk(Ship ship) {
            Set<Coordinate> coordinates = shipCoordinates.get(ship);
            return coordinates.stream().allMatch(coordinate -> checkCoordinateHasMark(coordinate, BoardMark.HIT));
        }

        public boolean isSurroundingSpaceFree(Coordinate coordinate) {
            Set<Coordinate> surroundingRange = coordinate.getSurroundingRange();
            surroundingRange.removeIf(this::isOutsideBoardBounds);
            return surroundingRange.stream().allMatch(this::isSpaceFree);
        }
        public boolean isSpaceFree(Coordinate coordinate) {
            if (isOutsideBoardBounds(coordinate))
                return false;
            return checkCoordinateHasMark(coordinate, BoardMark.FOG) || checkCoordinateHasMark(coordinate, BoardMark.MISSED);
        }
        private boolean checkCoordinateHasMark(Coordinate coordinate, BoardMark mark) {
            return this.openBoard[coordinate.getRow() - 1][coordinate.getColumn() - 1] == mark.getMark();
        }
        private boolean isOutsideBoardBounds(Coordinate c) {
            return c.getRow() < 1 || c.getColumn() < 1
                    || c.getRow() > this.openBoard.length || c.getColumn() > this.openBoard.length;
        }

        public String getOpenBoard() {
            return getColumnHeaders() + getOpenBoardWithRowLetter();
        }
        public String getFogOfWarBoard() {
            var fogOfWarBoard = getOpenBoardWithRowLetter().replace('O', '~');
            return getColumnHeaders() + fogOfWarBoard;
        }
        private String getColumnHeaders() {
            var stringBuilder = new StringBuilder();
            stringBuilder.append("  ");

            for (int i = 1; i < 11; i++)
                stringBuilder.append(i).append(" ");

            stringBuilder.append(System.lineSeparator());
            return stringBuilder.toString();
        }
        private String getOpenBoardWithRowLetter() {
            var stringBuilder = new StringBuilder();
            char letter = 'A';

            for (char[] row: this.openBoard) {
                stringBuilder.append(letter).append(" ");

                for (char space : row)
                    stringBuilder.append(space).append(" ");

                letter ++;
                stringBuilder.append(System.lineSeparator());
            }
            return stringBuilder.toString().trim();
        }
    }

  learner_created: true
- name: src/battleship/coordinate/CoordinateInputResult.java
  visible: true
  text: |
    package battleship.coordinate;

    public enum CoordinateInputResult {
        INCORRECT_LENGTH("Error! Wrong length of the Submarine! Try again"),
        DIAGONAL_DIRECTION("Error! Wrong ship location! Try again"),
        CONFLICTING_LOCATION("Error! You placed it too close to another one. Try again"),
        INVALID_COORDINATE("Error! You entered the wrong coordinates! Try again"),
        SUCCESS("Success");

        private final String description;
        private CoordinateInputResult(String description) {
            this.description = description;
        }

        public String getDescription() {
            return this.description;
        }
    }
  learner_created: true
- name: src/battleship/validator/ValidatorFactory.java
  visible: true
  text: |
    package battleship.validator;

    import battleship.BattleshipBoard;
    import battleship.Ship;
    import battleship.coordinate.CoordinatePair;

    import java.util.ArrayList;
    import java.util.List;

    public class ValidatorFactory {
        private final BattleshipBoard board;

        public ValidatorFactory(BattleshipBoard board) {
            this.board = board;
        }
        public List<Validatable> getValidators(CoordinatePair pair, Ship ship) {
            List<Validatable> validators = new ArrayList<>();
            validators.add(new IsLengthCorrect(pair, ship));
            validators.add(new IsPathFree(board, pair));
            validators.add(new IsSpaceSurroundingPathFree(board, pair));
            validators.add(new IsValidShipDirection(pair));
            return validators;
        }
    }
  learner_created: true
- name: src/battleship/validator/IsValidShipDirection.java
  visible: true
  text: |
    package battleship.validator;

    import battleship.coordinate.CoordinateInputResult;
    import battleship.coordinate.CoordinatePair;

    public class IsValidShipDirection implements Validatable {
        private CoordinatePair pair;

        public IsValidShipDirection(CoordinatePair pair) {
            this.pair = pair;
        }

        @Override
        public boolean isValid() {
            return isDiagonal() || isHorizontal() || isVertical();
        }

        @Override
        public CoordinateInputResult getErrorMessage() {
            return isValid() ? CoordinateInputResult.SUCCESS : CoordinateInputResult.DIAGONAL_DIRECTION;
        }

        private boolean isHorizontal() {
            return this.pair.getFirst().getRow() == this.pair.getSecond().getRow();
        }

        private boolean isVertical() {
            return this.pair.getFirst().getColumn() == this.pair.getSecond().getColumn();
        }

        private boolean isDiagonal() {
            return Math.abs(this.pair.getFirst().getRow() - this.pair.getSecond().getRow()) ==
                    Math.abs(this.pair.getFirst().getColumn() - this.pair.getSecond().getColumn());
        }
    }
  learner_created: true
- name: src/battleship/validator/IsPathFree.java
  visible: true
  text: |
    package battleship.validator;

    import battleship.BattleshipBoard;
    import battleship.coordinate.Coordinate;
    import battleship.coordinate.CoordinateInputResult;
    import battleship.coordinate.CoordinatePair;

    import java.util.Set;

    public class IsPathFree implements Validatable{
        private BattleshipBoard board;
        private final CoordinatePair pair;

        public IsPathFree(BattleshipBoard board, CoordinatePair pair) {
            this.board = board;
            this.pair = pair;
        }

        @Override
        public boolean isValid() {
            Set<Coordinate> range = pair.getPathRange();
            return range.stream().allMatch(board::isSpaceFree);
        }

        @Override
        public CoordinateInputResult getErrorMessage() {
            return isValid() ? CoordinateInputResult.SUCCESS : CoordinateInputResult.CONFLICTING_LOCATION;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public enum Ship {
        AIRCRAFT_CARRIER("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        private final String name;
        private final int size;
        Ship(String name, int size) {
            this.name = name;
            this.size = size;
        }

        public String getName() {
            return name;
        }

        public int getSize() {
            return size;
        }
    }
  learner_created: true
- name: src/battleship/coordinate/CoordinatePair.java
  visible: true
  text: |
    package battleship.coordinate;

    import java.util.HashSet;
    import java.util.Set;

    public class CoordinatePair {
        private final Coordinate first;
        private final Coordinate second;

        public CoordinatePair(Coordinate first, Coordinate second) {
            this.first = first;
            this.second = second;
        }

        public Coordinate getFirst() {
            return first;
        }

        public Coordinate getSecond() {
            return second;
        }

        public int calculateSize() {
            return (int) Math.sqrt(Math.pow(second.getColumn() - first.getColumn(), 2) + Math.pow(second.getRow() - first.getRow(),2));
        }

        public Set<Coordinate> getPathRange() {
            return getPathRange(this);
        }

        private Set<Coordinate> getPathRange(CoordinatePair pair) {
            Set<Coordinate> range = new HashSet<>();
            try {
                if (pair.calculateSize() != 1) {
                    Coordinate midPoint = getMidPoint(pair);
                    range.add(midPoint);

                    CoordinatePair firstToMiddle = new CoordinatePair(pair.getFirst(), midPoint);
                    range.addAll(getPathRange(firstToMiddle));

                    CoordinatePair middleToSecond = new CoordinatePair(midPoint, pair.getSecond());
                    range.addAll(getPathRange(middleToSecond));
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            range.add(first);
            range.add(second);
            return range;
        }

        private Coordinate getMidPoint(CoordinatePair pair) {
            Coordinate first = pair.getFirst();
            Coordinate second = pair.getSecond();
            int row = (first.getRow() + second.getRow()) / 2;
            int column = (first.getColumn() + second.getColumn()) / 2;

            return new Coordinate(row, column);
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 05 Jan 2023 13:02:50 UTC
record: -1
